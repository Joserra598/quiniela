var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "renderCl", function () {
  return renderCl;
});
_parcelHelpers.export(exports, "unsucribeCl", function () {
  return unsucribeCl;
});
const inputFirstSection = document.querySelector(".second");
const sidebar = document.querySelector(".sidebar");
class sectionCl {
  constructor() {
    sidebar.addEventListener("click", this.handleMove.bind(this));
  }
  /*handleMove(e) {*/
  /*const btnPushed = e.target.closest(".btn-primary") || e.target.closest(".back__icon");*/
  /*if (!btnPushed) return;*/
  /*this.btnSelect = btnPushed;*/
  /*// console.log(this);*/
  /*// btnPushed.dataset?.back && this.dismoutSection(e, btnPushed);*/
  /*btnPushed.dataset?.next && this.renderInputs(e, btnPushed);*/
  /*}*/
  moveSections(val) {
    const sidebarSecions = document.querySelectorAll(".sidebar__section");
    sidebarSecions.forEach(section => {
      section.style.transform = `translateX(${val * -100}% )`;
    });
  }
  waitTime(time) {
    return new Promise(resolve => {
      setTimeout(resolve, time * 1000);
    });
  }
  showErrorValue(inputs) {
    inputs.forEach(input => {
      if (!Boolean(input.value)) {
        input.classList.add("error-move");
        setTimeout(() => input.classList.remove("error-move"), 400);
      }
    });
  }
  showInfo(e) {
    // console.log(e.target.closest("input"));
    const inputCatch = e.target.closest("input");
    if (!inputCatch) return;
    // Remove info in all inputs
    const InputContainer = inputCatch.closest(".sidebar__section").querySelectorAll(".input__info");
    const infoArray = [...InputContainer];
    infoArray.forEach(info => info.classList.remove("show-info"));
    // Add Info only the input selected now
    const infoElmt = inputCatch.closest(".input__container").querySelector(".input__info");
    infoElmt.classList.add("show-info");
  }
  /*Este metod regresa true si hay uno input vacio;*/
  checkValues(values) {
    return values.some(value => Boolean(value.value) === false);
  }
}
class renderCl extends sectionCl {
  constructor() {
    super();
    console.log(this);
  }
  /*inputsCreate([{ NumeroParticipantes: cantidad }], titulo) {*/
  inputsCreate(cantidad, titulo) {
    // Regreso un string para colocar unir al String padre
    return new Array(+cantidad).fill("").map((_, pos) => `<div class="input__values">
                    <label for="" class="input__label">${titulo}  #${pos + 1}:</label>
                    <input type="text" class="input__primary" />
                </div>`).reduce((acc, val) => acc += val, "");
  }
  sidebarSectionGeneral(titulo = "Hola", sectionNumber) {
    return `<div class="sidebar__section user-input" style="transform: translateX(-${(sectionNumber - 1) * 100}%);">
        <div class="sidebar__section-header">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                class="back__icon"
                data-back="${sectionNumber}"
            >
                <path
                    d="M13.427 3.021h-7.427v-3.021l-6 5.39 6 5.61v-3h7.427c3.071 0 5.561 2.356 5.561 5.427 0 3.071-2.489 5.573-5.561 5.573h-7.427v5h7.427c5.84 0 10.573-4.734 10.573-10.573s-4.733-10.406-10.573-10.406z"
                />
            </svg>
            <h2 class="header__title">Coloque el nombre de los ${titulo}s</h2>
        </div>
        <div class="inputs__container">${this.inputsCreate(3, titulo)}</div>
        <button class="btn btn-primary" data-next="${sectionNumber + 1}">Siguiente</button>
    </div>
        
        `;
  }
  storedValues(inputs) {
    return Object.fromEntries(inputs.map(input => {
      const keyName = input.closest(".input__values").querySelector("label").textContent.split(" ").join("").slice(0, -1);
      return [keyName, input.value];
    }));
  }
  getTitulo(val) {
    if (val === 2) return "Equipo";
    if (val === 3) return "Participante";
  }
  async renderInputs(e, btnPushed) {
    const currentSection = +btnPushed.dataset.next;
    const inputs = [...e.target.closest(".sidebar__section").querySelectorAll("input")];
    e.preventDefault();
    this.checkValues(inputs) && this.showErrorValue(inputs);
    if (this.checkValues(inputs)) return;
    if (currentSection > 3) return;
    e.target.classList.add("btn__spinner");
    if (currentSection >= 2) {
      // Se deben guardar los datos antes de avanzar.
      // inputsValues.push(this.storedValues(inputs));
      sidebar.insertAdjacentHTML("beforeend", this.sidebarSectionGeneral(this.getTitulo(currentSection), currentSection));
    }
    await this.waitTime(1);
    this.moveSections(currentSection);
    await this.waitTime(0.3);
    e.target.classList.remove("btn__spinner");
  }
  handleMove(e) {
    const btnPushed = e.target.closest(".btn-primary") || e.target.closest(".back__icon");
    // if (!btnPushed) return;
    console.log(this);
    // btnPushed.dataset?.back && this.dismoutSection(e, btnPushed);
    btnPushed.dataset?.next && this.renderInputs(e, btnPushed);
  }
}
class unsucribeCl extends sectionCl {
  constructor() {
    super();
  }
  handleMove(e) {
    const btnPushed = e.target.closest(".btn-primary") || e.target.closest(".back__icon");
    // if (!btnPushed) return;
    console.log(this);
    btnPushed.dataset?.back && this.dismoutSection(e, btnPushed);
  }
  async dismoutSection(e, btnPushed) {
    this.moveSections(+btnPushed.dataset.back - 1);
    if (btnPushed.dataset.back < 2) return;
    // inputsValues.pop();
    await this.waitTime(0.5);
    e.target.closest(".sidebar__section").remove();
  }
}
